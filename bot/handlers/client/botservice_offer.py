"""Service order create client-side handlers"""

import logging
from typing import Any

from pydantic import ValidationError

from aiogram import types, Bot

from aiogram_dialog import DialogManager, Window, Dialog

from aiogram_dialog.widgets.kbd import Cancel
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.text import Const

from dialog.dialog_state import BotServiceOfferSG

from db.services.botservice import create_service

from schemas.client import BotServiceModel

from sqlalchemy.exc import DBAPIError

from config_loader import Config

offer_created_window = Window(
    Const("‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–π—Ç–µ, c –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω—É—Ç."),
    Cancel(Const("üîô –ù–∞–∑–∞–¥")),
    state=BotServiceOfferSG.offer_created,
)


async def pm_admins(config: Config) -> None:
    for admin in config.bot.admins:
        bot: Bot = Bot.get_current()

        await bot.send_message(admin, "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!")


async def set_description(
    message: types.Message,
    widget: Any,
    manager: DialogManager,
    input: str,
):
    """Set description and create offer"""

    manager.dialog_data["description"] = input
    manager.dialog_data["user_id"] = message.from_user.id

    config: Config = manager.middleware_data.get("config")

    db_session = manager.middleware_data.get("db_session")

    try:
        service = BotServiceModel(**manager.dialog_data)
        await create_service(
            db_session,
            service,
        )

        await pm_admins(config)

        await manager.switch_to(BotServiceOfferSG.offer_created)
    except (DBAPIError, ValidationError):
        await message.answer("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..")
        await manager.done()


set_description_window = Window(
    Const("‚åõ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–∏—à–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ."),
    Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
    TextInput("botservicedescinp", str, on_success=set_description),
    state=BotServiceOfferSG.set_description,
)


async def set_title(
    message: types.Message, widget: Any, manager: DialogManager, input: str
):
    """Set title"""

    manager.dialog_data["title"] = input

    await manager.switch_to(BotServiceOfferSG.set_description)


set_title_window = Window(
    Const("üñäÔ∏è –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–π –±–æ—Ç –≤–∞–º –Ω—É–∂–µ–Ω, –Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤."),
    Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
    TextInput("botservicetitleinp", str, on_success=set_title),
    state=BotServiceOfferSG.set_title,
)

botservice_offer_dialog = Dialog(
    set_title_window,
    set_description_window,
    offer_created_window,
)
